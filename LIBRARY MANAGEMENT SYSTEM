LIBRARY MANAGEMENT SYSTEM

#include <iostream>
#include <string>
using namespace std;

const int MAX_BOOKS = 100;
const int MAX_BORROWERS = 50;  

struct Book {
    string title;
    string author;
    string isbn;
    bool isAvailable;  
};

struct Borrower {
    string name;
    string borrowerId;
    string borrowedBookIsbn;
    int borrowDays;  
};

class Library {
private:
    Book books[MAX_BOOKS];  
    Borrower borrowers[MAX_BORROWERS];  
    int bookCount;  
    int borrowerCount; 

public:
    Library() : bookCount(0), borrowerCount(0) {}

    void addBook(string title, string author, string isbn) {
        if (bookCount < MAX_BOOKS) {
            books[bookCount].title = title;
            books[bookCount].author = author;
            books[bookCount].isbn = isbn;
            books[bookCount].isAvailable = true;
            bookCount++;
            cout << "Book added successfully!" << endl;
        } else {
            cout << "Book limit reached. Cannot add more books." << endl;
        }
    }

    void searchBook(string searchTerm) {
        bool found = false;
        for (int i = 0; i < bookCount; ++i) {
            if (books[i].title == searchTerm || books[i].author == searchTerm || books[i].isbn == searchTerm) {
                cout << "Book Found: " << books[i].title << " by " << books[i].author << ", ISBN: " << books[i].isbn << endl;
                found = true;
            }
        }
        if (!found) {
            cout << "No matching book found." << endl;
        }
    }

    void checkoutBook(string borrowerId, string isbn) {
        int bookIndex = -1;
        int borrowerIndex = -1;

        for (int i = 0; i < bookCount; ++i) {
            if (books[i].isbn == isbn && books[i].isAvailable) {
                bookIndex = i;
                break;
            }
        }

        for (int i = 0; i < borrowerCount; ++i) {
            if (borrowers[i].borrowerId == borrowerId) {
                borrowerIndex = i;
                break;
            }
        }

        if (bookIndex != -1 && borrowerIndex != -1) {
            books[bookIndex].isAvailable = false; 
            borrowers[borrowerIndex].borrowedBookIsbn = isbn;
            borrowers[borrowerIndex].borrowDays = 0; 
            cout << borrowers[borrowerIndex].name << " checked out the book: " << books[bookIndex].title << endl;
        } else {
            cout << "Either the book is unavailable or the borrower doesn't exist!" << endl;
        }
    }

    void returnBook(string borrowerId) {
        int borrowerIndex = -1;

        for (int i = 0; i < borrowerCount; ++i) {
            if (borrowers[i].borrowerId == borrowerId) {
                borrowerIndex = i;
                break;
            }
        }

        if (borrowerIndex != -1) {
            string isbn = borrowers[borrowerIndex].borrowedBookIsbn;

            int bookIndex = -1;
            for (int i = 0; i < bookCount; ++i) {
                if (books[i].isbn == isbn) {
                    bookIndex = i;
                    break;
                }
            }

            int fine = calculateFine(borrowers[borrowerIndex].borrowDays);
            if (fine > 0) {
                cout << "This book is overdue! Fine: $" << fine << endl;
            }

            books[bookIndex].isAvailable = true;
            borrowers[borrowerIndex].borrowedBookIsbn = "";
            cout << borrowers[borrowerIndex].name << " returned the book: " << books[bookIndex].title << endl;
        } else {
            cout << "No borrowed book found for this borrower!" << endl;
        }
    }

    int calculateFine(int borrowDays) {
        const int maxBorrowDays = 14;  
        if (borrowDays > maxBorrowDays) {
            return (borrowDays - maxBorrowDays); 
        }
        return 0;
    }

    void addBorrower(string name, string borrowerId) {
        if (borrowerCount < MAX_BORROWERS) {
            borrowers[borrowerCount].name = name;
            borrowers[borrowerCount].borrowerId = borrowerId;
            borrowers[borrowerCount].borrowedBookIsbn = "";
            borrowers[borrowerCount].borrowDays = 0;  
            borrowerCount++;
            cout << "Borrower added successfully!" << endl;
        } else {
            cout << "Borrower limit reached. Cannot add more borrowers." << endl;
        }
    }

    void listAvailableBooks() {
        bool found = false;
        for (int i = 0; i < bookCount; ++i) {
            if (books[i].isAvailable) {
                cout << books[i].title << " by " << books[i].author << ", ISBN: " << books[i].isbn << endl;
                found = true;
            }
        }
        if (!found) {
            cout << "No books are currently available." << endl;
        }
    }

    void updateBorrowDays(string borrowerId, int days) {
        for (int i = 0; i < borrowerCount; ++i) {
            if (borrowers[i].borrowerId == borrowerId) {
                borrowers[i].borrowDays += days;
                break;
            }
        }
    }
};

int main() {
    Library library;
    int choice;
    string title, author, isbn, borrowerId, borrowerName;

    while (true) {
        cout << "\nLibrary Management System\n";
        cout << "1. Add Book\n";
        cout << "2. Search Book\n";
        cout << "3. Checkout Book\n";
        cout << "4. Return Book\n";
        cout << "5. Add Borrower\n";
        cout << "6. List Available Books\n";
        cout << "7. Exit\n";
        cout << "Enter your choice (1-7): ";
        cin >> choice;
        cin.ignore(); 

        switch (choice) {
            case 1:
                cout << "Enter book title: ";
                getline(cin, title);
                cout << "Enter author name: ";
                getline(cin, author);
                cout << "Enter ISBN: ";
                getline(cin, isbn);
                library.addBook(title, author, isbn);
                break;

            case 2:
                cout << "Enter search term (title/author/ISBN): ";
                getline(cin, isbn); 
                library.searchBook(isbn);
                break;

            case 3:
                cout << "Enter borrower ID: ";
                getline(cin, borrowerId);
                cout << "Enter book ISBN to checkout: ";
                getline(cin, isbn);
                library.checkoutBook(borrowerId, isbn);
                break;

            case 4:
                cout << "Enter borrower ID to return book: ";
                getline(cin, borrowerId);
                library.returnBook(borrowerId);
                break;

            case 5:
                cout << "Enter borrower name: ";
                getline(cin, borrowerName);
                cout << "Enter borrower ID: ";
                getline(cin, borrowerId);
                library.addBorrower(borrowerName, borrowerId);
                break;

            case 6:
                library.listAvailableBooks();
                break;

            case 7:
                cout << "Exiting Library Management System. Goodbye!" << endl;
                return 0;

            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}

Output:

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 5
Enter borrower name: Sam
Enter borrower ID: 54321
Borrower added successfully!

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 1
Enter book title: C++ programming language
Enter author name: Bjarne Stroustrup
Enter ISBN: 1234567890
Book added successfully!

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 1
Enter book title: java programming language
Enter author name:  James GoslingJames Gosling
Enter ISBN: 0987654321
Book added successfully!

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 2
Enter search term (title/author/ISBN): 0987654321
Book Found: java programming language by James Gosling, ISBN: 0987654321

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 6
C++ programming language by Bjarne Stroustrup, ISBN: 1234567890
java programming language by James Gosling, ISBN: 0987654321

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 3
Enter borrower ID: 54321
Enter book ISBN to checkout: 1234567890
Sam checked out the book: C++ programming language

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 4
Enter borrower ID to return book: 54321
Sam returned the book: C++ programming language

Library Management System
1. Add Book
2. Search Book
3. Checkout Book
4. Return Book
5. Add Borrower
6. List Available Books
7. Exit
Enter your choice (1-7): 7
Exiting Library Management System. Goodbye!


=== Code Execution Successful ===
